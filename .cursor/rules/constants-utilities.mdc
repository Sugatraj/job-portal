# Constants & Utilities Rules

## Constants File Structure
Make a constant file where most of used constants will be used. Reusable logic should be made in constant-like files so they act as single source of truth.

```typescript
// lib/constants/index.ts
export const APP_CONFIG = {
  name: process.env.NEXT_PUBLIC_APP_NAME || 'Job Portal',
  version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',
  apiUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
} as const;

export const ROUTES = {
  login: '/login',
  admin: {
    dashboard: '/admin',
    candidates: '/admin/candidates',
    jobs: '/admin/jobs',
  },
  user: {
    dashboard: '/user',
    jobs: '/user/jobs',
    profile: '/user/profile',
  },
} as const;

export const USER_ROLES = {
  ADMIN: 'admin',
  USER: 'user',
} as const;

export const USER_TYPES = {
  EMPLOYEE: 'employee',
  CANDIDATE: 'candidate',
} as const;
```

## Environment Configuration
Make an .ENV for development and production:

```bash
# .env.local
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME="Job Portal"
NEXT_PUBLIC_APP_VERSION=1.0.0

# .env.example
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME="Job Portal"
NEXT_PUBLIC_APP_VERSION=1.0.0
```

## Utility Functions
Use packages which make coding job easy like for dates we should use dayjs instead of writing the logic again and again:

```typescript
// lib/utils/date.ts
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import utc from 'dayjs/plugin/utc';

dayjs.extend(relativeTime);
dayjs.extend(utc);

export const formatDate = (date: string | Date, format = 'MMM DD, YYYY') => {
  return dayjs(date).format(format);
};

export const getRelativeTime = (date: string | Date) => {
  return dayjs(date).fromNow();
};

export const isToday = (date: string | Date) => {
  return dayjs(date).isSame(dayjs(), 'day');
};

// lib/utils/index.ts
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatCurrency(amount: number, currency = 'USD') {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency,
  }).format(amount);
}

export function truncateText(text: string, length: number) {
  if (text.length <= length) return text;
  return text.slice(0, length) + '...';
}
```

## Best Practices
- Centralize all constants in dedicated files
- Use environment variables for configuration
- Create utility functions for common operations
- Use established packages (dayjs, clsx, tailwind-merge) instead of custom logic
- Maintain single source of truth for all constants
description:
globs:
alwaysApply: false
---
